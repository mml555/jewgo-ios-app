# Resolve react_native_pods.rb with node to allow for hoisting
require 'pathname'
require 'fileutils'
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '15.1'
prepare_react_native_project!

project 'JewgoAppFinal.xcodeproj'

target 'JewgoAppFinal' do
  # Remove static frameworks to allow proper module resolution
  config = use_native_modules!

  # Toggle Fabric/new-arch via environment:
  #   FABRIC_ENABLED=1 (or RCT_NEW_ARCH_ENABLED=1) to enable Fabric
  #   default: classic mode (Fabric disabled)
  fabric_enabled_env = (ENV['FABRIC_ENABLED'] == '1') || (ENV['RCT_NEW_ARCH_ENABLED'] == '1')

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => fabric_enabled_env,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Configure react-native-maps to use Google Maps provider
  pod 'react-native-google-maps', :path => '../node_modules/react-native-maps'
  # Pin compatible Google Maps pods to ensure Swift symbols (e.g., GMUWeightedLatLng) are available
  pod 'GoogleMaps', '7.4.0', :modular_headers => true
  pod 'Google-Maps-iOS-Utils', '4.2.2', :modular_headers => true

end

post_install do |installer|
  react_native_post_install(installer)

  min_ios = '15.1'

  installer.generated_projects.each do |project|
    project.build_configurations.each do |config|
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -std=gnu++20'
      # Allow CocoaPods embed scripts (rsync) under Xcode 15/16 sandboxing
      config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end
  end

  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |cfg|
      s = cfg.build_settings
      s['IPHONEOS_DEPLOYMENT_TARGET'] = min_ios
      s['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      s['CLANG_CXX_LIBRARY'] = 'libc++'
      s['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -std=gnu++20'
      # Don't exclude arm64 for simulator - M1+ Macs need it
      # s['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      s['ENABLE_BITCODE'] = 'NO'
      s['CODE_SIGNING_ALLOWED'] = 'NO'
      # Prefer modular headers; avoid global non-modular flag.

      # Do not force a global prefix header; rely on platform SDK includes to avoid libc++ header ordering issues

      # Expose React framework headers for static linkage & Swift import
      if ['React', 'React-Core', 'React-CoreModules', 'React-RCTAppDelegate', 'ReactCommon'].include?(t.name)
        s['DEFINES_MODULE'] = 'YES'
        s['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      end
      
      # Ensure Google Maps pods build as modules so Swift can see ObjC symbols
      if ['GoogleMaps', 'Google-Maps-iOS-Utils', 'GoogleSignIn', 'AppAuth', 'GTMAppAuth'].include?(t.name)
        s['DEFINES_MODULE'] = 'YES'
      end

      # Ensure RN Maps headers (AirMaps) are visible to Google Maps variant
      if t.name == 'react-native-google-maps'
        s['HEADER_SEARCH_PATHS'] = [
          '$(inherited)',
          '$(PODS_ROOT)/Headers/Public/React-Core',
          '$(PODS_ROOT)/Headers/Public/React',
          '$(PODS_ROOT)/Headers/Public/react-native-google-maps',
          '${PODS_ROOT}/../../node_modules/react-native-maps/ios/AirMaps',
          '${PODS_ROOT}/../../node_modules/react-native-maps/ios/AirMaps/Callout',
          '${PODS_ROOT}/../../node_modules/react-native-maps/ios/AirGoogleMaps'
        ].join(' ')
      end

      # Rely on CocoaPods header maps for React renderer pods

      # Ensure React module is visible to Swift in geolocation-service
      if t.name == 'react-native-geolocation-service'
        s['DEFINES_MODULE'] = 'YES'
        s['CLANG_ENABLE_MODULES'] = 'YES'
        s['SWIFT_ENABLE_EXPLICIT_MODULES'] = 'NO'
        s['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'x86_64'
        s['HEADER_SEARCH_PATHS'] = [
          '$(inherited)',
          '$(PODS_ROOT)/Headers/Public/React-Core',
          '$(PODS_ROOT)/Headers/Public/React',
          '"$(PODS_ROOT)/Target Support Files/React-Core"'
        ].join(' ')
        s['SWIFT_INCLUDE_PATHS'] = [
          '$(inherited)',
          '$(PODS_ROOT)/Headers/Public/React-Core',
          '$(PODS_ROOT)/Headers/Public/React',
          '"$(PODS_ROOT)/Target Support Files/React-Core"'
        ].join(' ')
        s['OTHER_SWIFT_FLAGS'] = [
          s['OTHER_SWIFT_FLAGS'],
          '-Xcc',
          '"-fmodule-map-file=$(PODS_ROOT)/Target Support Files/React-Core/React-Core.modulemap"'
        ].compact.join(' ')
      end
    end
    # Ensure CocoaPods script phases declare stable outputs for Xcode 15+ dependency analysis
    script_phase_markers = {
      '[CP-User] [RN]Check rncore' => '$(DERIVED_FILE_DIR)/rncore_check_$(TARGET_NAME).marker',
      '[CP-User] [Hermes] Replace Hermes for the right configuration, if needed' => '$(DERIVED_FILE_DIR)/hermes_configured_$(TARGET_NAME).marker'
    }
    if t.respond_to?(:shell_script_build_phases)
      t.shell_script_build_phases.each do |phase|
        marker = script_phase_markers[phase.name]
        next unless marker
        existing = Array(phase.output_paths)
        phase.output_paths = existing + [marker] if existing.empty?
      end
    end
    
    # Do not patch pod xcconfig files directly; rely on podspecs
  end

  # Disable user script sandboxing on the user app project to allow Embed Pods Frameworks rsync
  installer.aggregate_targets.each do |agg|
    user_project = agg.user_project
    if user_project
      user_project.targets.each do |target|
        target.build_configurations.each do |cfg|
          cfg.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        end
      end
      user_project.build_configurations.each do |cfg|
        cfg.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end
      user_project.save
    end
  end
  
  # Do not rewrite Pods Target Support Files xcconfigs
end
