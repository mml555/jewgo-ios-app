# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '14.0'
prepare_react_native_project!

project 'JewgoAppFinal.xcodeproj'

use_frameworks! :linkage => :static

target 'JewgoAppFinal' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => false,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'GoogleMaps', '~> 8.4.0'
  pod 'Google-Maps-iOS-Utils', '~> 5.0.0'

  post_install do |installer|
    react_native_post_install(installer)

    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |cfg|
        s = cfg.build_settings
        s['IPHONEOS_DEPLOYMENT_TARGET']   = '14.0'
        s['ALWAYS_SEARCH_USER_PATHS']     = 'NO'
        s['USE_HEADERMAP']                = 'YES'
        s['CLANG_ENABLE_MODULES']         = 'YES'
        s['CLANG_CXX_LIBRARY']            = 'libc++'
        s['CLANG_CXX_LANGUAGE_STANDARD']  = 'gnu++20'

        defs = (s['GCC_PREPROCESSOR_DEFINITIONS'] || '$(inherited)').to_s.split(' ')
        defs |= %w[FOLLY_NO_CONFIG=1 HAVE_PTHREAD=1]
        s['GCC_PREPROCESSOR_DEFINITIONS'] = defs.join(' ')

        cxx = (s['OTHER_CPLUSPLUSFLAGS'] || '$(inherited)').to_s.split(' ')
        cxx |= %w[-std=gnu++20]
        s['OTHER_CPLUSPLUSFLAGS'] = cxx.join(' ')

        cflags = (s['OTHER_CFLAGS'] || '$(inherited)').to_s.split(' ')
        cflags |= %w[-DHAVE_PTHREAD=1]
        s['OTHER_CFLAGS'] = cflags.join(' ')
      end
    end

    installer.aggregate_targets.each do |agg|
      agg.user_project.native_targets.each do |nt|
        next unless nt.name == 'JewgoAppFinal'

        nt.build_configurations.each do |cfg|
          s = cfg.build_settings
          s['IPHONEOS_DEPLOYMENT_TARGET']   = '14.0'
          s['ALWAYS_SEARCH_USER_PATHS']     = 'NO'
          s['USE_HEADERMAP']                = 'YES'
          s['CLANG_ENABLE_MODULES']         = 'YES'
          s['CLANG_CXX_LIBRARY']            = 'libc++'
          s['CLANG_CXX_LANGUAGE_STANDARD']  = 'gnu++20'

          defs = (s['GCC_PREPROCESSOR_DEFINITIONS'] || '$(inherited)').to_s.split(' ')
          defs |= %w[FOLLY_NO_CONFIG=1 HAVE_PTHREAD=1]
          s['GCC_PREPROCESSOR_DEFINITIONS'] = defs.join(' ')

          cxx = (s['OTHER_CPLUSPLUSFLAGS'] || '$(inherited)').to_s.split(' ')
          cxx |= %w[-std=gnu++20]
          s['OTHER_CPLUSPLUSFLAGS'] = cxx.join(' ')

          cflags = (s['OTHER_CFLAGS'] || '$(inherited)').to_s.split(' ')
          cflags |= %w[-DHAVE_PTHREAD=1]
          s['OTHER_CFLAGS'] = cflags.join(' ')
        end
      end
    end
  end
end
